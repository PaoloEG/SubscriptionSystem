version: "3.1"
services:
  public_api:
    build: ./public_apis/customers
    restart: on-failure
    depends_on:
      - rabbitmq
    environment:
      RABBIT: amqp://admin:securepassword@rabbitmq:5672
      NODE_ENV: production
      PORT: 3000
    ports:
      - "3000:3000"
    networks: 
      - frontend
      - backend
    command: npm run pm2

  admin_api:
    build: ./public_apis/admins
    restart: on-failure
    depends_on:
      - rabbitmq
      - mongo
    environment:
      DATABASE_URL: mongodb://subscriptionservice:securepassword@mongo:27017/subscription-service
      RABBIT: amqp://admin:securepassword@rabbitmq:5672
      NODE_ENV: production
      PORT: 4000
    ports:
      - "4000:4000"
    networks: 
      - frontend
      - backend
    command: npm run pm2

  subscription_service:
    build: ./subscription_service
    restart: on-failure
    depends_on:
      - mongo
      - rabbitmq
    environment:
      DATABASE_URL: mongodb://subscriptionservice:securepassword@mongo:27017/subscription-service
      RABBIT: amqp://admin:securepassword@rabbitmq:5672
      NODE_ENV: production
    networks: 
      - backend
    command: npm run pm2

  email_service:
    build: ./email_service
    restart: on-failure
    depends_on:
      - mongo
      - rabbitmq
    environment:
      RABBIT: amqp://admin:securepassword@rabbitmq:5672
      NODE_ENV: production
    networks: 
      - backend
    command: npm run pm2

  mongo:
    image: mongo:latest
    restart: on-failure
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: securepassword
      MONGO_INITDB_DATABASE: subscription-service
    networks: 
      - backend
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  rabbitmq:
    build: ./rabbitMQ
    restart: on-failure
    ports:
      - 15672:15672
    networks: 
      - backend
      
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge